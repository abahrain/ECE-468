import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.misc.ParseCancellationException;

public class Micro 
{
  public static void main(String[] args) throws Exception
  {
      MicroLexer lex = new MicroLexer(new ANTLRFileStream(args[0]));
      CommonTokenStream cts = new CommonTokenStream(lex);
      MicroParser parse = new MicroParser(cts);
      try
      {
	parse.program();
	//System.out.println("Accepted");
      }
      catch (RecognitionException re)
      {
	System.out.println("Not Accepted");
      }

//       //ANTLR will read in the file
//       ANTLRFileStream stream = new ANTLRFileStream(args[0]);
//       //Pass the information to the lexer
//       MicroLexer lex = new MicroLexer(stream);
//       CommonTokenStream cts = new CommonTokenStream(lex);
//       //Pass the information to the parser
//       MicroParser parse = new MicroParser(cts);
//       ANTLRErrorStrategy es = new BailErrorStrategy();
//       parse.setErrorHandler(es);
// 	  
// 	  //The parser will either accept that the pattern sent in
// 	  //is of the correct format for a program. Or, if it is not
// 	  //the parser will throw an error that is then caught.
// 	  Boolean tester = true;
// 	  try
// 	  {
// 		ParseTree tree = parse.program();
// 	  }
// 	  catch (ParseCancellationException e) 
// 	  {
//         tester = false;
//         System.out.println("Not accepted");
//       }
//       if(tester)
//       {
//       System.out.println("Accepted");
// 	    //ANTLR will read in the file and pass the string to the lexer
// 	    ANTLRFileStream stream2 = new ANTLRFileStream(args[0]);
// 	    MicroLexer lex2 = new MicroLexer(stream2);
// 	    //The lexer piece is then set equal to a token
// 	    Token t2 = lex2.nextToken();
// 	    while(t2.getType() != MicroLexer.EOF)
// 	    {
// 	      if(MicroLexer.tokenNames[t2.getType()].equals("FUNCTION"))
// 	      {
// 	      System.out.println("Symbol table "+t2.getType()+"\n\n");
// 	      }
// 	      else if(MicroLexer.tokenNames[t2.getType()].equals("BLOCK"))
// 	      {
// 	      System.out.println("Symbol table "+t2.getType()+"\n\n");
// 	      }
// 	      else if(MicroLexer.tokenNames[t2.getType()].equals("PROGRAM"))
// 	      {
// 	      System.out.println("Symbol table GLOBAL");
// 	      }
// 	      else if(MicroLexer.tokenNames[t2.getType()].equals("INTLITERAL"))
// 	      {
// 	      System.out.println("name "+t2.getText()+" type FLOAT");
// 	      }
// 	      else if(MicroLexer.tokenNames[t2.getType()].equals("FLOATLITERAL"))
// 	      {
// 	      System.out.println("name "+t2.getType()+" type FLOAT");
// 	      }
// 	      else if(MicroLexer.tokenNames[t2.getType()].equals("STRINGLITERAL"))
// 	      {
// 	      //var name type value
// 	      System.out.println("name "+t2.getType()+" type STRING value "+t2.getText());
// 	      }
// 	      t2 = lex2.nextToken();
// 	      }
//      }
  }
}